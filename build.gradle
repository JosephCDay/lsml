plugins {
    id "application"
    id "java"
    id "jacoco"

    id "com.dorongold.task-tree" version "2.1.0"
    id "org.openjfx.javafxplugin" version "0.0.13"
    id "org.beryx.jlink" version "2.26.0"
    id "com.diffplug.spotless" version "6.10.0"
}

repositories {
    mavenCentral()
}

version = project.getProperty('version')

application {
    applicationName = 'Li Song Mechlab'
    archivesBaseName = 'lsml'
    mainClass = 'org.lisoft.lsml.view_fx.LiSongMechLab'
    mainModule = 'org.lisoft.lsml';
}

tasks.withType(JavaCompile) {
    options.release = 17
    options.compilerArgs += "-Xlint:unchecked"
    options.compilerArgs += "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

javafx {
    version = '17'
    modules = [
            'javafx.base',
            'javafx.graphics',
            'javafx.controls',
            'javafx.fxml'
    ]
}

dependencies {
    implementation "com.thoughtworks.xstream:xstream:1.4.20",
            "net.java.dev.jna:jna:5.10.0",
            "com.google.dagger:dagger:2.21",
            "io.github.x-stream:mxparser:1.2.2"

    annotationProcessor "com.google.dagger:dagger-compiler:2.21"

    testImplementation "junit:junit:4.12+",
            "org.mockito:mockito-core:5.0.0",
            "pl.pragmatists:JUnitParams:1.1.1"
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'
        ratchetFrom 'origin/develop'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        googleJavaFormat('1.15.0')
        ratchetFrom 'origin/develop'
        licenseHeaderFile 'license_header'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
    jacoco {
        excludes = ['**/view_fx/**',
                    '**/database/gamedata/**',
                    '**/database/gamedata/MwoDataReader**',
                    '**/view_headless/**']
    }
}

check.dependsOn jacocoTestReport

/* ----------------------------------------------------------------------------
 * Release Management
 * --------------------------------------------------------------------------*/

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        noConsole = true
    }
    mergedModule{
        // The autogenerated merged module-info.java wrongly includes a provides with statement
        // for the factory which causes a compile failure. Exclude it from the generation here.
        excludeProvides service: 'org.xmlpull.v1.XmlPullParserFactory'
    }
    jpackage{
        resourceDir = file('installer')
        icon = "installer/icon.ico"
    }
}

task wixHeat(type: Exec){
    workingDir 'installer'
    executable 'heat'
    // heat dir "..\build\jpackage\lsml\" -gg -sreg -nologo -srd -var "var.g_jpkg" -cg application -out test.wxs
    args 'dir', "..\\build\\jpackage\\lsml\\", '-gg', '-sreg', '-nologo','-dr','INSTALLDIR', '-srd', '-var', 'var.g_jpkg', '-t','generated.xsl', '-cg', 'application', '-out', 'generated.wxs'
    dependsOn = ['jpackageImage']
}

task wixCandle64(type: Exec) {
    workingDir 'installer'
    executable 'candle'
    args '-dg_64bit="yes"', '-arch', 'x64', '-dg_version=' + version, '"*.wxs"'
    dependsOn = ["wixHeat"]
}

task wixLight64(type: Exec) {
    workingDir 'installer'
    executable 'light'
    args '-ext', 'WixUIExtension', '"*.wixobj"', '-out', 'LSML_Setup-' + version + '_64bit.msi'
    dependsOn = ["wixCandle64"]
}

task wixCandle32(type: Exec) {
    workingDir 'installer'
    executable 'candle'
    args '-dg_64bit="no"', '-dg_version=' + version, '"*.wxs"'
//    dependsOn = ["jpackageImage"]
}

task wixLight32(type: Exec) {
    workingDir 'installer'
    executable 'light'
    args '-ext', 'WixUIExtension', '"*.wixobj"', '-out', 'LSML_Setup-' + version + '_32bit.msi'
    dependsOn = ["wixCandle32"]
}

compileJava.mustRunAfter clean

task release {
    dependsOn = ["clean", "check", "wixLight64", "wixLight32"]
}

jar {
    manifest {
        attributes('Main-Class': application.mainClass,
                'Implementation-Title': 'Li Song Mechlab',
                'Implementation-Version': archiveVersion)
    }

    // Change the version string in the database to match the released version
    eachFile { copyDetails ->
        if (copyDetails.path == 'database.xml') {
            filter { line ->
                line.replace('0.0.0', archiveVersion.get())
            }
        }
    }
}
