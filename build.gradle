apply plugin: 'application'
apply plugin: 'launch4j'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

allprojects {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

/* ----------------------------------------------------------------------------
 * General project configuration
 * --------------------------------------------------------------------------*/
def installerDir = project.projectDir.toString() + '/installer/';
applicationName = 'Li Song Mechlab'
archivesBaseName = 'lsml'
mainClassName = 'org.lisoft.lsml.view_fx.LiSongMechLab'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

/* ----------------------------------------------------------------------------
 * Dependencies
 * --------------------------------------------------------------------------*/
repositories {
	jcenter()
}

dependencies {
	compile 'com.thoughtworks.xstream:xstream:1.4.7+',
			'net.java.dev.jna:jna:4.0.0+',
			'com.squareup.dagger:dagger:1.2+'

	testCompile 'junit:junit:4+', 
				'org.mockito:mockito-all:1.10.19+', 
				'pl.pragmatists:JUnitParams:1.0.2+'
}

/* ----------------------------------------------------------------------------
 * Tests, Verification and Reports
 * --------------------------------------------------------------------------*/
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

findbugs {
    excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/view_fx/**',
                              '**/datacache/gamedata/**',
                              '**/datacache/DataCache*'])
        })
    }
}
check.dependsOn jacocoTestReport

/* ----------------------------------------------------------------------------
 * Release Management
 * --------------------------------------------------------------------------*/
launch4j {
	jreMinVersion = "1.8.0_77"
	mainClassName = project.mainClassName
	dontWrapJar = true
	outputDir = '../installer/'
	icon = installerDir + '/icon.ico'
	jar = project.jar.archiveName
	manifest = installerDir + '/lsml.manifest'
}

copyL4jLib{
    dependsOn += ["check", "jar"]
}

task wixCandle64(type: Exec) {
	workingDir 'installer'
	executable 'candle'
	args '-dg_64bit="yes"', '-dg_version=' + version, '"*.wxs"'
    dependsOn = ["launch4j"]
}

task wixLight64(type: Exec) {
	workingDir 'installer'
	executable 'light'
	args '-ext', 'WixUIExtension', '"*.wixobj"', '-out', 'LSML_Setup-'+version+'_64bit.msi'
    dependsOn = ["wixCandle64"]
}

task wixCandle32(type: Exec) {
	workingDir 'installer'
	executable 'candle'
	args '-dg_64bit="no"', '-dg_version=' + version, '"*.wxs"'
    dependsOn = ["launch4j"]
}

task wixLight32(type: Exec) {
	workingDir 'installer'
	executable 'light'
	args '-ext', 'WixUIExtension', '"*.wixobj"', '-out', 'LSML_Setup-'+version+'_32bit.msi'
    dependsOn = ["wixCandle32"]
}

gradle.taskGraph.whenReady { taskGraph ->
	if (!taskGraph.hasTask(release)) {
		version = '(develop)'
	}
}

task release {
    dependsOn = ["wixLight64", "wixLight32"]
}

jar {
	destinationDir = file(installerDir)
	from { 
		configurations.compile.collect { 
			it.isDirectory() ? it : zipTree(it) 
		} 
	}
	
	archiveName="lsml.jar"

	if(version == null){
		version = '0.0.0'
	}

	manifest {
		attributes(	'Main-Class': mainClassName, 
					'Implementation-Title': 'Li Song Mechlab', 
					'Implementation-Version' : version)
	}
}

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'edu.sc.seis.gradle:launch4j:1.+'
	}
}
