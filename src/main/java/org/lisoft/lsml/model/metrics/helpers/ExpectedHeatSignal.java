/*
 * Li Song Mechlab - A 'mech building tool for PGI's MechWarrior: Online.
 * Copyright (C) 2023  Li Song
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.lisoft.lsml.model.metrics.helpers;

import java.util.Collection;
import org.lisoft.mwo_data.equipment.*;
import org.lisoft.mwo_data.modifiers.Modifier;

/**
 * This {@link IntegratedSignal} models the statistically expected heat generated by a {@link
 * HeatSource}.
 *
 * @author Li Song
 */
public class ExpectedHeatSignal implements IntegratedSignal {
  private final IntegratedSignal signal;

  public ExpectedHeatSignal(HeatSource aHeatSource, Collection<Modifier> aModifiers) {
    if (aHeatSource instanceof final Engine engine) {
      signal = new IntegratedConstantSignal(engine.getHeat(aModifiers));
    }
    // Weapons in order of most specific to the least specific
    else if (aHeatSource instanceof final EnergyWeapon energyWeapon) {
      final double duration = energyWeapon.getDuration(aModifiers);
      final double heatGenerated = energyWeapon.getHeat(aModifiers);
      final double expectedFiringPeriod = energyWeapon.getExpectedFiringPeriod(aModifiers);
      if (expectedFiringPeriod <= 0.0) {
        // Some weapons don't have a period, like TAG
        signal = new IntegratedConstantSignal(energyWeapon.getHeat(aModifiers));
      } else if (duration > 0.0) {
        final double heatRate = heatGenerated / duration;
        signal = new IntegratedPulseTrain(expectedFiringPeriod, duration, heatRate);
      } else {
        signal = new IntegratedImpulseTrain(expectedFiringPeriod, heatGenerated);
      }
    } else if (aHeatSource instanceof final MissileWeapon missileWeapon) {
      // TODO: Update this to correctly use volley size/delay to calculate the
      // heat signal for streaming missiles once https://github.com/lisongmechlab/lsml/pull/778
      // is merged. And add tests at that point.
      final double expectedFiringPeriod = missileWeapon.getExpectedFiringPeriod(aModifiers);
      final double heatGenerated = missileWeapon.getHeat(aModifiers);
      signal = new IntegratedImpulseTrain(expectedFiringPeriod, heatGenerated);
    } else if (aHeatSource instanceof final Weapon weapon) {
      final double expectedFiringPeriod = weapon.getExpectedFiringPeriod(aModifiers);
      final double heatGenerated = weapon.getHeat(aModifiers);
      signal = new IntegratedImpulseTrain(expectedFiringPeriod, heatGenerated);
    } else {
      throw new RuntimeException(
          "Unhandled heat source type in ExpectedHeatSignal: "
              + aHeatSource.getName()
              + " of type: "
              + aHeatSource.getClass().getSimpleName());
    }
  }

  @Override
  public double integrateFromZeroTo(double aTime) {
    return signal.integrateFromZeroTo(aTime);
  }
}
